{"ast":null,"code":"import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n/**\n * The {@link formatDuration} function options.\n */\n\nconst defaultFormat = [\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\"];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param duration - The duration to format\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport function formatDuration(duration, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const format = options?.format ?? defaultFormat;\n  const zero = options?.zero ?? false;\n  const delimiter = options?.delimiter ?? \" \";\n\n  if (!locale.formatDistance) {\n    return \"\";\n  }\n\n  const result = format.reduce((acc, unit) => {\n    const token = `x${unit.replace(/(^.)/, m => m.toUpperCase())}`;\n    const value = duration[unit];\n\n    if (value !== undefined && (zero || duration[unit])) {\n      return acc.concat(locale.formatDistance(token, value));\n    }\n\n    return acc;\n  }, []).join(delimiter);\n  return result;\n} // Fallback for modularized imports:\n\nexport default formatDuration;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/formatDuration.mjs"],"names":["defaultLocale","getDefaultOptions","defaultFormat","formatDuration","duration","options","defaultOptions","locale","format","zero","delimiter","formatDistance","result","reduce","acc","unit","token","replace","m","toUpperCase","value","undefined","concat","join"],"mappings":"AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA;;;;AAIA,MAAMC,aAAa,GAAG,CACpB,OADoB,EAEpB,QAFoB,EAGpB,OAHoB,EAIpB,MAJoB,EAKpB,OALoB,EAMpB,SANoB,EAOpB,SAPoB,CAAtB;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,OAAlC,EAA2C;AAChD,QAAMC,cAAc,GAAGL,iBAAiB,EAAxC;AACA,QAAMM,MAAM,GAAGF,OAAO,EAAEE,MAAT,IAAmBD,cAAc,CAACC,MAAlC,IAA4CP,aAA3D;AACA,QAAMQ,MAAM,GAAGH,OAAO,EAAEG,MAAT,IAAmBN,aAAlC;AACA,QAAMO,IAAI,GAAGJ,OAAO,EAAEI,IAAT,IAAiB,KAA9B;AACA,QAAMC,SAAS,GAAGL,OAAO,EAAEK,SAAT,IAAsB,GAAxC;;AAEA,MAAI,CAACH,MAAM,CAACI,cAAZ,EAA4B;AAC1B,WAAO,EAAP;AACD;;AAED,QAAMC,MAAM,GAAGJ,MAAM,CAClBK,MADY,CACL,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrB,UAAMC,KAAK,GAAI,IAAGD,IAAI,CAACE,OAAL,CAAa,MAAb,EAAsBC,CAAD,IAAOA,CAAC,CAACC,WAAF,EAA5B,CAA6C,EAA/D;AACA,UAAMC,KAAK,GAAGhB,QAAQ,CAACW,IAAD,CAAtB;;AACA,QAAIK,KAAK,KAAKC,SAAV,KAAwBZ,IAAI,IAAIL,QAAQ,CAACW,IAAD,CAAxC,CAAJ,EAAqD;AACnD,aAAOD,GAAG,CAACQ,MAAJ,CAAWf,MAAM,CAACI,cAAP,CAAsBK,KAAtB,EAA6BI,KAA7B,CAAX,CAAP;AACD;;AACD,WAAON,GAAP;AACD,GARY,EAQV,EARU,EASZS,IATY,CASPb,SATO,CAAf;AAWA,SAAOE,MAAP;AACD,C,CAED;;AACA,eAAeT,cAAf","sourcesContent":["import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link formatDuration} function options.\n */\n\nconst defaultFormat = [\n  \"years\",\n  \"months\",\n  \"weeks\",\n  \"days\",\n  \"hours\",\n  \"minutes\",\n  \"seconds\",\n];\n\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param duration - The duration to format\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\nexport function formatDuration(duration, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const format = options?.format ?? defaultFormat;\n  const zero = options?.zero ?? false;\n  const delimiter = options?.delimiter ?? \" \";\n\n  if (!locale.formatDistance) {\n    return \"\";\n  }\n\n  const result = format\n    .reduce((acc, unit) => {\n      const token = `x${unit.replace(/(^.)/, (m) => m.toUpperCase())}`;\n      const value = duration[unit];\n      if (value !== undefined && (zero || duration[unit])) {\n        return acc.concat(locale.formatDistance(token, value));\n      }\n      return acc;\n    }, [])\n    .join(delimiter);\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatDuration;\n"]},"metadata":{},"sourceType":"module"}