{"ast":null,"code":"import { addQuarters } from \"./addQuarters.mjs\";\nimport { startOfQuarter } from \"./startOfQuarter.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * The {@link eachQuarterOfInterval} function options.\n */\n\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval\n *\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * const result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\n\nexport function eachQuarterOfInterval(interval, options) {\n  const startDate = toDate(interval.start);\n  const endDate = toDate(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startOfQuarter(startDate) : +startOfQuarter(endDate);\n  let currentDate = reversed ? startOfQuarter(endDate) : startOfQuarter(startDate);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addQuarters(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n} // Fallback for modularized imports:\n\nexport default eachQuarterOfInterval;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/eachQuarterOfInterval.mjs"],"names":["addQuarters","startOfQuarter","toDate","eachQuarterOfInterval","interval","options","startDate","start","endDate","end","reversed","endTime","currentDate","step","dates","push","reverse"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,OAAzC,EAAkD;AACvD,QAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAACG,KAAV,CAAxB;AACA,QAAMC,OAAO,GAAGN,MAAM,CAACE,QAAQ,CAACK,GAAV,CAAtB;AAEA,MAAIC,QAAQ,GAAG,CAACJ,SAAD,GAAa,CAACE,OAA7B;AACA,QAAMG,OAAO,GAAGD,QAAQ,GACpB,CAACT,cAAc,CAACK,SAAD,CADK,GAEpB,CAACL,cAAc,CAACO,OAAD,CAFnB;AAGA,MAAII,WAAW,GAAGF,QAAQ,GACtBT,cAAc,CAACO,OAAD,CADQ,GAEtBP,cAAc,CAACK,SAAD,CAFlB;AAIA,MAAIO,IAAI,GAAGR,OAAO,EAAEQ,IAAT,IAAiB,CAA5B;AACA,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;AACX,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,GAAG,CAACA,IAAR;AACAH,IAAAA,QAAQ,GAAG,CAACA,QAAZ;AACD;;AAED,QAAMI,KAAK,GAAG,EAAd;;AAEA,SAAO,CAACF,WAAD,IAAgBD,OAAvB,EAAgC;AAC9BG,IAAAA,KAAK,CAACC,IAAN,CAAWb,MAAM,CAACU,WAAD,CAAjB;AACAA,IAAAA,WAAW,GAAGZ,WAAW,CAACY,WAAD,EAAcC,IAAd,CAAzB;AACD;;AAED,SAAOH,QAAQ,GAAGI,KAAK,CAACE,OAAN,EAAH,GAAqBF,KAApC;AACD,C,CAED;;AACA,eAAeX,qBAAf","sourcesContent":["import { addQuarters } from \"./addQuarters.mjs\";\nimport { startOfQuarter } from \"./startOfQuarter.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link eachQuarterOfInterval} function options.\n */\n\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval\n *\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * const result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\nexport function eachQuarterOfInterval(interval, options) {\n  const startDate = toDate(interval.start);\n  const endDate = toDate(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed\n    ? +startOfQuarter(startDate)\n    : +startOfQuarter(endDate);\n  let currentDate = reversed\n    ? startOfQuarter(endDate)\n    : startOfQuarter(startDate);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addQuarters(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachQuarterOfInterval;\n"]},"metadata":{},"sourceType":"module"}