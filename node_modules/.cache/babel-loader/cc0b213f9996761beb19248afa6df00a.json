{"ast":null,"code":"import { addHours } from \"./addHours.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * The {@link eachHourOfInterval} function options.\n */\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * const result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\n\nexport function eachHourOfInterval(interval, options) {\n  const startDate = toDate(interval.start);\n  const endDate = toDate(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  currentDate.setMinutes(0, 0, 0);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addHours(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n} // Fallback for modularized imports:\n\nexport default eachHourOfInterval;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/eachHourOfInterval.mjs"],"names":["addHours","toDate","eachHourOfInterval","interval","options","startDate","start","endDate","end","reversed","endTime","currentDate","setMinutes","step","dates","push","reverse"],"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,OAAtC,EAA+C;AACpD,QAAMC,SAAS,GAAGJ,MAAM,CAACE,QAAQ,CAACG,KAAV,CAAxB;AACA,QAAMC,OAAO,GAAGN,MAAM,CAACE,QAAQ,CAACK,GAAV,CAAtB;AAEA,MAAIC,QAAQ,GAAG,CAACJ,SAAD,GAAa,CAACE,OAA7B;AACA,QAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACJ,SAAJ,GAAgB,CAACE,OAAzC;AACA,MAAII,WAAW,GAAGF,QAAQ,GAAGF,OAAH,GAAaF,SAAvC;AACAM,EAAAA,WAAW,CAACC,UAAZ,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;AAEA,MAAIC,IAAI,GAAGT,OAAO,EAAES,IAAT,IAAiB,CAA5B;AACA,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;AACX,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,GAAG,CAACA,IAAR;AACAJ,IAAAA,QAAQ,GAAG,CAACA,QAAZ;AACD;;AAED,QAAMK,KAAK,GAAG,EAAd;;AAEA,SAAO,CAACH,WAAD,IAAgBD,OAAvB,EAAgC;AAC9BI,IAAAA,KAAK,CAACC,IAAN,CAAWd,MAAM,CAACU,WAAD,CAAjB;AACAA,IAAAA,WAAW,GAAGX,QAAQ,CAACW,WAAD,EAAcE,IAAd,CAAtB;AACD;;AAED,SAAOJ,QAAQ,GAAGK,KAAK,CAACE,OAAN,EAAH,GAAqBF,KAApC;AACD,C,CAED;;AACA,eAAeZ,kBAAf","sourcesContent":["import { addHours } from \"./addHours.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link eachHourOfInterval} function options.\n */\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * const result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\nexport function eachHourOfInterval(interval, options) {\n  const startDate = toDate(interval.start);\n  const endDate = toDate(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  currentDate.setMinutes(0, 0, 0);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addHours(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachHourOfInterval;\n"]},"metadata":{},"sourceType":"module"}