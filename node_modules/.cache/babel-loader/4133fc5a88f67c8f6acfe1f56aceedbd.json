{"ast":null,"code":"import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n/**\n * The {@link differenceInCalendarWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of calendar weeks\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\nexport function differenceInCalendarWeeks(dateLeft, dateRight, options) {\n  const startOfWeekLeft = startOfWeek(dateLeft, options);\n  const startOfWeekRight = startOfWeek(dateRight, options);\n  const timestampLeft = +startOfWeekLeft - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  const timestampRight = +startOfWeekRight - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer because the number of\n  // milliseconds in a days is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\n} // Fallback for modularized imports:\n\nexport default differenceInCalendarWeeks;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/differenceInCalendarWeeks.mjs"],"names":["millisecondsInWeek","startOfWeek","getTimezoneOffsetInMilliseconds","differenceInCalendarWeeks","dateLeft","dateRight","options","startOfWeekLeft","startOfWeekRight","timestampLeft","timestampRight","Math","round"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,+BAAT,QAAgD,4CAAhD;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,SAASC,yBAAT,CAAmCC,QAAnC,EAA6CC,SAA7C,EAAwDC,OAAxD,EAAiE;AACtE,QAAMC,eAAe,GAAGN,WAAW,CAACG,QAAD,EAAWE,OAAX,CAAnC;AACA,QAAME,gBAAgB,GAAGP,WAAW,CAACI,SAAD,EAAYC,OAAZ,CAApC;AAEA,QAAMG,aAAa,GACjB,CAACF,eAAD,GAAmBL,+BAA+B,CAACK,eAAD,CADpD;AAEA,QAAMG,cAAc,GAClB,CAACF,gBAAD,GAAoBN,+BAA+B,CAACM,gBAAD,CADrD,CANsE,CAStE;AACA;AACA;;AACA,SAAOG,IAAI,CAACC,KAAL,CAAW,CAACH,aAAa,GAAGC,cAAjB,IAAmCV,kBAA9C,CAAP;AACD,C,CAED;;AACA,eAAeG,yBAAf","sourcesContent":["import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInCalendarWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of calendar weeks\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\nexport function differenceInCalendarWeeks(dateLeft, dateRight, options) {\n  const startOfWeekLeft = startOfWeek(dateLeft, options);\n  const startOfWeekRight = startOfWeek(dateRight, options);\n\n  const timestampLeft =\n    +startOfWeekLeft - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  const timestampRight =\n    +startOfWeekRight - getTimezoneOffsetInMilliseconds(startOfWeekRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a days is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarWeeks;\n"]},"metadata":{},"sourceType":"module"}