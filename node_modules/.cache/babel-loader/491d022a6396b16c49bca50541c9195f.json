{"ast":null,"code":"import { getDate } from \"./getDate.mjs\";\nimport { getDay } from \"./getDay.mjs\";\nimport { startOfMonth } from \"./startOfMonth.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n/**\n * The {@link getWeekOfMonth} function options.\n */\n\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The week of month\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\n\nexport function getWeekOfMonth(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;\n  const currentDayOfMonth = getDate(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n  const startWeekDay = getDay(startOfMonth(date));\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n} // Fallback for modularized imports:\n\nexport default getWeekOfMonth;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/getWeekOfMonth.mjs"],"names":["getDate","getDay","startOfMonth","getDefaultOptions","getWeekOfMonth","date","options","defaultOptions","weekStartsOn","locale","currentDayOfMonth","isNaN","NaN","startWeekDay","lastDayOfFirstWeek","remainingDaysAfterFirstWeek","Math","ceil"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,cAAc,GAAGJ,iBAAiB,EAAxC;AACA,QAAMK,YAAY,GAChBF,OAAO,EAAEE,YAAT,IACAF,OAAO,EAAEG,MAAT,EAAiBH,OAAjB,EAA0BE,YAD1B,IAEAD,cAAc,CAACC,YAFf,IAGAD,cAAc,CAACE,MAAf,EAAuBH,OAAvB,EAAgCE,YAHhC,IAIA,CALF;AAOA,QAAME,iBAAiB,GAAGV,OAAO,CAACK,IAAD,CAAjC;AACA,MAAIM,KAAK,CAACD,iBAAD,CAAT,EAA8B,OAAOE,GAAP;AAE9B,QAAMC,YAAY,GAAGZ,MAAM,CAACC,YAAY,CAACG,IAAD,CAAb,CAA3B;AAEA,MAAIS,kBAAkB,GAAGN,YAAY,GAAGK,YAAxC;AACA,MAAIC,kBAAkB,IAAI,CAA1B,EAA6BA,kBAAkB,IAAI,CAAtB;AAE7B,QAAMC,2BAA2B,GAAGL,iBAAiB,GAAGI,kBAAxD;AACA,SAAOE,IAAI,CAACC,IAAL,CAAUF,2BAA2B,GAAG,CAAxC,IAA6C,CAApD;AACD,C,CAED;;AACA,eAAeX,cAAf","sourcesContent":["import { getDate } from \"./getDate.mjs\";\nimport { getDay } from \"./getDay.mjs\";\nimport { startOfMonth } from \"./startOfMonth.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekOfMonth} function options.\n */\n\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The week of month\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\nexport function getWeekOfMonth(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const currentDayOfMonth = getDate(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n\n  const startWeekDay = getDay(startOfMonth(date));\n\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeekOfMonth;\n"]},"metadata":{},"sourceType":"module"}