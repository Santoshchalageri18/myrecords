{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n/**\n * @name closestIndexTo\n * @category Common Helpers\n * @summary Return an index of the closest date from the array comparing to the given date.\n *\n * @description\n * Return an index of the closest date from the array comparing to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateToCompare - The date to compare with\n * @param dates - The array to search\n *\n * @returns An index of the date closest to the given date or undefined if no valid value is given\n *\n * @example\n * // Which date is closer to 6 September 2015?\n * const dateToCompare = new Date(2015, 8, 6)\n * const datesArray = [\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   new Date(2017, 0, 1)\n * ]\n * const result = closestIndexTo(dateToCompare, datesArray)\n * //=> 1\n */\n\nexport function closestIndexTo(dateToCompare, dates) {\n  const date = toDate(dateToCompare);\n  if (isNaN(Number(date))) return NaN;\n  const timeToCompare = date.getTime();\n  let result;\n  let minDistance;\n  dates.forEach(function (dirtyDate, index) {\n    const currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n} // Fallback for modularized imports:\n\nexport default closestIndexTo;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/closestIndexTo.mjs"],"names":["toDate","closestIndexTo","dateToCompare","dates","date","isNaN","Number","NaN","timeToCompare","getTime","result","minDistance","forEach","dirtyDate","index","currentDate","distance","Math","abs"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,SAASC,cAAT,CAAwBC,aAAxB,EAAuCC,KAAvC,EAA8C;AACnD,QAAMC,IAAI,GAAGJ,MAAM,CAACE,aAAD,CAAnB;AAEA,MAAIG,KAAK,CAACC,MAAM,CAACF,IAAD,CAAP,CAAT,EAAyB,OAAOG,GAAP;AAEzB,QAAMC,aAAa,GAAGJ,IAAI,CAACK,OAAL,EAAtB;AAEA,MAAIC,MAAJ;AACA,MAAIC,WAAJ;AACAR,EAAAA,KAAK,CAACS,OAAN,CAAc,UAAUC,SAAV,EAAqBC,KAArB,EAA4B;AACxC,UAAMC,WAAW,GAAGf,MAAM,CAACa,SAAD,CAA1B;;AAEA,QAAIR,KAAK,CAACC,MAAM,CAACS,WAAD,CAAP,CAAT,EAAgC;AAC9BL,MAAAA,MAAM,GAAGH,GAAT;AACAI,MAAAA,WAAW,GAAGJ,GAAd;AACA;AACD;;AAED,UAAMS,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASV,aAAa,GAAGO,WAAW,CAACN,OAAZ,EAAzB,CAAjB;;AACA,QAAIC,MAAM,IAAI,IAAV,IAAkBM,QAAQ,GAAGL,WAAjC,EAA8C;AAC5CD,MAAAA,MAAM,GAAGI,KAAT;AACAH,MAAAA,WAAW,GAAGK,QAAd;AACD;AACF,GAdD;AAgBA,SAAON,MAAP;AACD,C,CAED;;AACA,eAAeT,cAAf","sourcesContent":["import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name closestIndexTo\n * @category Common Helpers\n * @summary Return an index of the closest date from the array comparing to the given date.\n *\n * @description\n * Return an index of the closest date from the array comparing to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateToCompare - The date to compare with\n * @param dates - The array to search\n *\n * @returns An index of the date closest to the given date or undefined if no valid value is given\n *\n * @example\n * // Which date is closer to 6 September 2015?\n * const dateToCompare = new Date(2015, 8, 6)\n * const datesArray = [\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   new Date(2017, 0, 1)\n * ]\n * const result = closestIndexTo(dateToCompare, datesArray)\n * //=> 1\n */\nexport function closestIndexTo(dateToCompare, dates) {\n  const date = toDate(dateToCompare);\n\n  if (isNaN(Number(date))) return NaN;\n\n  const timeToCompare = date.getTime();\n\n  let result;\n  let minDistance;\n  dates.forEach(function (dirtyDate, index) {\n    const currentDate = toDate(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default closestIndexTo;\n"]},"metadata":{},"sourceType":"module"}