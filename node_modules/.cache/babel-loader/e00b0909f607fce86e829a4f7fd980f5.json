{"ast":null,"code":"var _jsxFileName = \"/home/mitron/Desktop/MYMEDIRECORDS/frontend/src/Components/DashbordCompo/MyRecords.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport { withRouter } from '.../utils'; // Assuming withRouter is a higher-order component to handle routing\n\nclass MyRecords extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchRecords = async () => {\n      try {\n        const token = localStorage.getItem('token');\n\n        if (!token) {\n          swal({\n            text: 'You are not logged in. Please log in first.',\n            icon: 'warning'\n          });\n          return;\n        }\n\n        const response = await axios.get('http://localhost:2000/get-records', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.setState({\n          records: response.data.records,\n          loading: false\n        });\n      } catch (error) {\n        console.error('Error fetching records:', error);\n        swal({\n          text: 'Error fetching records. Please try again later.',\n          icon: 'error'\n        });\n        this.setState({\n          loading: false\n        });\n      }\n    };\n\n    this.state = {\n      records: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.fetchRecords();\n  }\n\n  render() {\n    const {\n      records,\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, \"My Records\"), loading ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"Loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, records.length > 0 ? /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }\n    }, records.map((record, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    }, record.filename))) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    }, \"No records found.\")));\n  }\n\n}\n\nexport default withRouter(MyRecords);","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/src/Components/DashbordCompo/MyRecords.js"],"names":["React","Component","axios","swal","withRouter","MyRecords","constructor","props","fetchRecords","token","localStorage","getItem","text","icon","response","get","headers","Authorization","setState","records","data","loading","error","console","state","componentDidMount","render","padding","length","map","record","index","filename"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,UAAT,QAA2B,WAA3B,C,CAAwC;;AAExC,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAYnBC,YAZmB,GAYJ,YAAY;AACzB,UAAI;AACF,cAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,YAAI,CAACF,KAAL,EAAY;AACVN,UAAAA,IAAI,CAAC;AACHS,YAAAA,IAAI,EAAE,6CADH;AAEHC,YAAAA,IAAI,EAAE;AAFH,WAAD,CAAJ;AAIA;AACD;;AAED,cAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAU,mCAAV,EAA+C;AACpEC,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,EAAG,UAASR,KAAM;AADxB;AAD2D,SAA/C,CAAvB;AAMA,aAAKS,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcD,OADX;AAEZE,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID,OApBD,CAoBE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACAnB,QAAAA,IAAI,CAAC;AACHS,UAAAA,IAAI,EAAE,iDADH;AAEHC,UAAAA,IAAI,EAAE;AAFH,SAAD,CAAJ;AAIA,aAAKK,QAAL,CAAc;AAAEG,UAAAA,OAAO,EAAE;AAAX,SAAd;AACD;AACF,KAzCkB;;AAEjB,SAAKG,KAAL,GAAa;AACXL,MAAAA,OAAO,EAAE,EADE;AAEXE,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,SAAKjB,YAAL;AACD;;AAiCDkB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,OAAF;AAAWE,MAAAA;AAAX,QAAuB,KAAKG,KAAlC;AAEA,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGN,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADM,gBAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,OAAO,CAACS,MAAR,GAAiB,CAAjB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGT,OAAO,CAACU,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,kBACX;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBD,MAAM,CAACE,QAAxB,CADD,CADH,CADD,gBAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BARJ,CALJ,CADF;AAoBD;;AAnE+B;;AAsElC,eAAe5B,UAAU,CAACC,SAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport { withRouter } from '.../utils'; // Assuming withRouter is a higher-order component to handle routing\n\nclass MyRecords extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      records: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchRecords();\n  }\n\n  fetchRecords = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        swal({\n          text: 'You are not logged in. Please log in first.',\n          icon: 'warning',\n        });\n        return;\n      }\n\n      const response = await axios.get('http://localhost:2000/get-records', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      this.setState({\n        records: response.data.records,\n        loading: false,\n      });\n    } catch (error) {\n      console.error('Error fetching records:', error);\n      swal({\n        text: 'Error fetching records. Please try again later.',\n        icon: 'error',\n      });\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { records, loading } = this.state;\n\n    return (\n      <div style={{ padding: '20px' }}>\n        <h1>My Records</h1>\n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <div>\n            {records.length > 0 ? (\n              <ul>\n                {records.map((record, index) => (\n                  <li key={index}>{record.filename}</li>\n                ))}\n              </ul>\n            ) : (\n              <p>No records found.</p>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MyRecords);\n"]},"metadata":{},"sourceType":"module"}