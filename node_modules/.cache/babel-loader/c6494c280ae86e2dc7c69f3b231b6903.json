{"ast":null,"code":"var _jsxFileName = \"/home/mitron/Desktop/MYMEDIRECORDS/frontend/src/Pages/Login.js\";\nimport React, { Component } from \"react\";\nimport swal from \"sweetalert\";\nimport { Button, TextField, Link } from \"@material-ui/core\";\nimport { withRouter } from \"../utils\";\nimport '../Styles/Login.css'; // Import custom CSS file for login page styling\n\nimport Header from \"../Header\";\n\nconst axios = require(\"axios\");\n\nconst bcrypt = require(\"bcryptjs\");\n\nvar salt = bcrypt.genSaltSync(10);\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCredentialResponse = response => {\n      axios.post('http://localhost:2000/google-login', {\n        id_token: response.credential\n      }).then(res => {\n        // Handle successful login\n        localStorage.setItem('token', res.data.token);\n        localStorage.setItem('user_id', res.data.id);\n        localStorage.setItem('loggedIn', 'true'); // Set flag indicating user is logged in\n\n        this.props.navigate(\"/HomeDashboard\");\n      }).catch(err => {\n        console.error('Google Sign-In failed:', err);\n        swal({\n          text: 'Google Sign-In failed. Please try again.',\n          icon: \"error\",\n          type: \"error\"\n        });\n      });\n    };\n\n    this.onChange = e => this.setState({\n      [e.target.name]: e.target.value\n    });\n\n    this.login = () => {\n      const pwd = bcrypt.hashSync(this.state.password, salt);\n      axios.post('http://localhost:2000/login', {\n        username: this.state.username,\n        password: pwd\n      }).then(res => {\n        localStorage.setItem('token', res.data.token);\n        localStorage.setItem('user_id', res.data.id);\n        localStorage.setItem('loggedIn', 'true'); // Set flag indicating user is logged in\n\n        this.props.navigate(\"/HomeDashboard\");\n      }).catch(err => {\n        if (err.response && err.response.data && err.response.data.errorMessage) {\n          swal({\n            text: err.response.data.errorMessage,\n            icon: \"error\",\n            type: \"error\"\n          });\n        }\n      });\n    };\n\n    this.state = {\n      username: '',\n      password: ''\n    };\n  }\n\n  componentDidMount() {\n    // Initialize the Google Identity Services library\n    window.onload = () => {\n      google.accounts.id.initialize({\n        client_id: 'YOUR_CLIENT_ID.apps.googleusercontent.com',\n        callback: this.handleCredentialResponse\n      });\n      google.accounts.id.renderButton(document.getElementById(\"google-signin-button\"), {\n        theme: \"outline\",\n        size: \"large\"\n      } // Customization attributes\n      );\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(TextField, {\n      id: \"standard-basic\",\n      type: \"text\",\n      autoComplete: \"off\",\n      name: \"username\",\n      value: this.state.username,\n      onChange: this.onChange,\n      placeholder: \"User Name\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"standard-basic\",\n      type: \"password\",\n      autoComplete: \"off\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.onChange,\n      placeholder: \"Password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: \"button-style\",\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      disabled: this.state.username === '' || this.state.password === '',\n      onClick: this.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"google-signin-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }), \" \", /*#__PURE__*/React.createElement(Link, {\n      component: \"button\",\n      onClick: () => {\n        this.props.navigate(\"/register\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, \"Register\")), /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default withRouter(Login);","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/src/Pages/Login.js"],"names":["React","Component","swal","Button","TextField","Link","withRouter","Header","axios","require","bcrypt","salt","genSaltSync","Login","constructor","props","handleCredentialResponse","response","post","id_token","credential","then","res","localStorage","setItem","data","token","id","navigate","catch","err","console","error","text","icon","type","onChange","e","setState","target","name","value","login","pwd","hashSync","state","password","username","errorMessage","componentDidMount","window","onload","google","accounts","initialize","client_id","callback","renderButton","document","getElementById","theme","size","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,IAA5B,QAAwC,mBAAxC;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,OAAO,qBAAP,C,CAA8B;;AAC9B,OAAOC,MAAP,MAAmB,WAAnB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIE,IAAI,GAAGD,MAAM,CAACE,WAAP,CAAmB,EAAnB,CAAX;;AAEA,MAAMC,KAAN,SAAoBZ,SAApB,CAA8B;AAC5Ba,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAsBnBC,wBAtBmB,GAsBSC,QAAD,IAAc;AACvCT,MAAAA,KAAK,CAACU,IAAN,CAAW,oCAAX,EAAiD;AAC/CC,QAAAA,QAAQ,EAAEF,QAAQ,CAACG;AAD4B,OAAjD,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACb;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,GAAG,CAACG,IAAJ,CAASC,KAAvC;AACAH,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCF,GAAG,CAACG,IAAJ,CAASE,EAAzC;AACAJ,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiC,MAAjC,EAJa,CAI6B;;AAC1C,aAAKT,KAAL,CAAWa,QAAX,CAAoB,gBAApB;AACD,OARD,EAQGC,KARH,CAQSC,GAAG,IAAI;AACdC,QAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCF,GAAxC;AACA5B,QAAAA,IAAI,CAAC;AACH+B,UAAAA,IAAI,EAAE,0CADH;AAEHC,UAAAA,IAAI,EAAE,OAFH;AAGHC,UAAAA,IAAI,EAAE;AAHH,SAAD,CAAJ;AAKD,OAfD;AAgBD,KAvCkB;;AAAA,SAyCnBC,QAzCmB,GAyCPC,CAAD,IAAO,KAAKC,QAAL,CAAc;AAAE,OAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AAA5B,KAAd,CAzCC;;AAAA,SA2CnBC,KA3CmB,GA2CX,MAAM;AACZ,YAAMC,GAAG,GAAGjC,MAAM,CAACkC,QAAP,CAAgB,KAAKC,KAAL,CAAWC,QAA3B,EAAqCnC,IAArC,CAAZ;AAEAH,MAAAA,KAAK,CAACU,IAAN,CAAW,6BAAX,EAA0C;AACxC6B,QAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE,QADmB;AAExCD,QAAAA,QAAQ,EAAEH;AAF8B,OAA1C,EAGGtB,IAHH,CAGSC,GAAD,IAAS;AACfC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,GAAG,CAACG,IAAJ,CAASC,KAAvC;AACAH,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCF,GAAG,CAACG,IAAJ,CAASE,EAAzC;AACAJ,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiC,MAAjC,EAHe,CAG2B;;AAC1C,aAAKT,KAAL,CAAWa,QAAX,CAAoB,gBAApB;AACD,OARD,EAQGC,KARH,CAQUC,GAAD,IAAS;AAChB,YAAIA,GAAG,CAACb,QAAJ,IAAgBa,GAAG,CAACb,QAAJ,CAAaQ,IAA7B,IAAqCK,GAAG,CAACb,QAAJ,CAAaQ,IAAb,CAAkBuB,YAA3D,EAAyE;AACvE9C,UAAAA,IAAI,CAAC;AACH+B,YAAAA,IAAI,EAAEH,GAAG,CAACb,QAAJ,CAAaQ,IAAb,CAAkBuB,YADrB;AAEHd,YAAAA,IAAI,EAAE,OAFH;AAGHC,YAAAA,IAAI,EAAE;AAHH,WAAD,CAAJ;AAKD;AACF,OAhBD;AAiBD,KA/DkB;;AAEjB,SAAKU,KAAL,GAAa;AACXE,MAAAA,QAAQ,EAAE,EADC;AAEXD,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AAEDG,EAAAA,iBAAiB,GAAG;AAClB;AACAC,IAAAA,MAAM,CAACC,MAAP,GAAgB,MAAM;AACpBC,MAAAA,MAAM,CAACC,QAAP,CAAgB1B,EAAhB,CAAmB2B,UAAnB,CAA8B;AAC5BC,QAAAA,SAAS,EAAE,2CADiB;AAE5BC,QAAAA,QAAQ,EAAE,KAAKxC;AAFa,OAA9B;AAIAoC,MAAAA,MAAM,CAACC,QAAP,CAAgB1B,EAAhB,CAAmB8B,YAAnB,CACEC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,CADF,EAEE;AAAEC,QAAAA,KAAK,EAAE,SAAT;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAFF,CAEsC;AAFtC;AAID,KATD;AAUD;;AA6CDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,SAAD;AACE,MAAA,EAAE,EAAC,gBADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,YAAY,EAAC,KAHf;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWE,QALpB;AAME,MAAA,QAAQ,EAAE,KAAKX,QANjB;AAOE,MAAA,WAAW,EAAC,WAPd;AAQE,MAAA,QAAQ,MARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAYE,oBAAC,SAAD;AACE,MAAA,EAAE,EAAC,gBADL;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,YAAY,EAAC,KAHf;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,KAAK,EAAE,KAAKS,KAAL,CAAWC,QALpB;AAME,MAAA,QAAQ,EAAE,KAAKV,QANjB;AAOE,MAAA,WAAW,EAAC,UAPd;AAQE,MAAA,QAAQ,MARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,eAsBE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,OAAO,EAAC,WAFV;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,MAAA,QAAQ,EAAE,KAAKS,KAAL,CAAWE,QAAX,KAAwB,EAAxB,IAA8B,KAAKF,KAAL,CAAWC,QAAX,KAAwB,EALlE;AAME,MAAA,OAAO,EAAE,KAAKJ,KANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAtBF,eAgCE;AAAK,MAAA,EAAE,EAAC,sBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCF,oBAiCE,oBAAC,IAAD;AACE,MAAA,SAAS,EAAC,QADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAK3B,KAAL,CAAWa,QAAX,CAAoB,WAApB;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjCF,CADF,eA2CE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3CF,CADF;AA+CD;;AAlH2B;;AAqH9B,eAAetB,UAAU,CAACO,KAAD,CAAzB","sourcesContent":["import React, { Component } from \"react\";\nimport swal from \"sweetalert\";\nimport { Button, TextField, Link } from \"@material-ui/core\";\nimport { withRouter } from \"../utils\";\nimport '../Styles/Login.css'; // Import custom CSS file for login page styling\nimport Header from \"../Header\";\nconst axios = require(\"axios\");\nconst bcrypt = require(\"bcryptjs\");\nvar salt = bcrypt.genSaltSync(10);\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: ''\n    };\n  }\n\n  componentDidMount() {\n    // Initialize the Google Identity Services library\n    window.onload = () => {\n      google.accounts.id.initialize({\n        client_id: 'YOUR_CLIENT_ID.apps.googleusercontent.com',\n        callback: this.handleCredentialResponse,\n      });\n      google.accounts.id.renderButton(\n        document.getElementById(\"google-signin-button\"),\n        { theme: \"outline\", size: \"large\" } // Customization attributes\n      );\n    };\n  }\n\n  handleCredentialResponse = (response) => {\n    axios.post('http://localhost:2000/google-login', {\n      id_token: response.credential\n    }).then(res => {\n      // Handle successful login\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('user_id', res.data.id);\n      localStorage.setItem('loggedIn', 'true'); // Set flag indicating user is logged in\n      this.props.navigate(\"/HomeDashboard\");\n    }).catch(err => {\n      console.error('Google Sign-In failed:', err);\n      swal({\n        text: 'Google Sign-In failed. Please try again.',\n        icon: \"error\",\n        type: \"error\"\n      });\n    });\n  }\n\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n  login = () => {\n    const pwd = bcrypt.hashSync(this.state.password, salt);\n\n    axios.post('http://localhost:2000/login', {\n      username: this.state.username,\n      password: pwd,\n    }).then((res) => {\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('user_id', res.data.id);\n      localStorage.setItem('loggedIn', 'true'); // Set flag indicating user is logged in\n      this.props.navigate(\"/HomeDashboard\");\n    }).catch((err) => {\n      if (err.response && err.response.data && err.response.data.errorMessage) {\n        swal({\n          text: err.response.data.errorMessage,\n          icon: \"error\",\n          type: \"error\"\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"login-container\">\n        <div className=\"login-form\">\n          <h2>Login</h2>\n          <TextField\n            id=\"standard-basic\"\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"username\"\n            value={this.state.username}\n            onChange={this.onChange}\n            placeholder=\"User Name\"\n            required\n          />\n          <TextField\n            id=\"standard-basic\"\n            type=\"password\"\n            autoComplete=\"off\"\n            name=\"password\"\n            value={this.state.password}\n            onChange={this.onChange}\n            placeholder=\"Password\"\n            required\n          />\n          <Button\n            className=\"button-style\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            disabled={this.state.username === '' || this.state.password === ''}\n            onClick={this.login}\n          >\n            Login\n          </Button>\n          <div id=\"google-signin-button\"></div> {/* Placeholder for the Google Sign-In button */}\n          <Link\n            component=\"button\"\n            onClick={() => {\n              this.props.navigate(\"/register\");\n            }}\n          >\n            Register\n          </Link>\n        </div>\n        <Header />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Login);\n"]},"metadata":{},"sourceType":"module"}