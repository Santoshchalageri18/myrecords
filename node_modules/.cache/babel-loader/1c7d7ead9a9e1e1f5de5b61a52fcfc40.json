{"ast":null,"code":"import { constructFrom } from \"./constructFrom.mjs\";\nimport { setMonth } from \"./setMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nexport function set(date, values) {\n  let _date = toDate(date); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n\n  if (isNaN(+_date)) {\n    return constructFrom(date, NaN);\n  }\n\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    _date = setMonth(_date, values.month);\n  }\n\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n\n  return _date;\n} // Fallback for modularized imports:\n\nexport default set;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/set.mjs"],"names":["constructFrom","setMonth","toDate","set","date","values","_date","isNaN","NaN","year","setFullYear","month","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds"],"mappings":"AAAA,SAASA,aAAT,QAA8B,qBAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmBC,MAAnB,EAA2B;AAChC,MAAIC,KAAK,GAAGJ,MAAM,CAACE,IAAD,CAAlB,CADgC,CAGhC;;;AACA,MAAIG,KAAK,CAAC,CAACD,KAAF,CAAT,EAAmB;AACjB,WAAON,aAAa,CAACI,IAAD,EAAOI,GAAP,CAApB;AACD;;AAED,MAAIH,MAAM,CAACI,IAAP,IAAe,IAAnB,EAAyB;AACvBH,IAAAA,KAAK,CAACI,WAAN,CAAkBL,MAAM,CAACI,IAAzB;AACD;;AAED,MAAIJ,MAAM,CAACM,KAAP,IAAgB,IAApB,EAA0B;AACxBL,IAAAA,KAAK,GAAGL,QAAQ,CAACK,KAAD,EAAQD,MAAM,CAACM,KAAf,CAAhB;AACD;;AAED,MAAIN,MAAM,CAACD,IAAP,IAAe,IAAnB,EAAyB;AACvBE,IAAAA,KAAK,CAACM,OAAN,CAAcP,MAAM,CAACD,IAArB;AACD;;AAED,MAAIC,MAAM,CAACQ,KAAP,IAAgB,IAApB,EAA0B;AACxBP,IAAAA,KAAK,CAACQ,QAAN,CAAeT,MAAM,CAACQ,KAAtB;AACD;;AAED,MAAIR,MAAM,CAACU,OAAP,IAAkB,IAAtB,EAA4B;AAC1BT,IAAAA,KAAK,CAACU,UAAN,CAAiBX,MAAM,CAACU,OAAxB;AACD;;AAED,MAAIV,MAAM,CAACY,OAAP,IAAkB,IAAtB,EAA4B;AAC1BX,IAAAA,KAAK,CAACY,UAAN,CAAiBb,MAAM,CAACY,OAAxB;AACD;;AAED,MAAIZ,MAAM,CAACc,YAAP,IAAuB,IAA3B,EAAiC;AAC/Bb,IAAAA,KAAK,CAACc,eAAN,CAAsBf,MAAM,CAACc,YAA7B;AACD;;AAED,SAAOb,KAAP;AACD,C,CAED;;AACA,eAAeH,GAAf","sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\nimport { setMonth } from \"./setMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nexport function set(date, values) {\n  let _date = toDate(date);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) {\n    return constructFrom(date, NaN);\n  }\n\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    _date = setMonth(_date, values.month);\n  }\n\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default set;\n"]},"metadata":{},"sourceType":"module"}