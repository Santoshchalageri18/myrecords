{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n/**\n * The {@link lastDayOfWeek} function options.\n */\n\n/**\n * @name lastDayOfWeek\n * @category Week Helpers\n * @summary Return the last day of a week for the given date.\n *\n * @description\n * Return the last day of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The last day of a week\n *\n * @example\n * // The last day of a week for 2 September 2014 11:55:00:\n * const result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:\n * const result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport function lastDayOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;\n\n  const _date = toDate(date);\n\n  const day = _date.getDay();\n\n  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n\n  _date.setHours(0, 0, 0, 0);\n\n  _date.setDate(_date.getDate() + diff);\n\n  return _date;\n} // Fallback for modularized imports:\n\nexport default lastDayOfWeek;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/lastDayOfWeek.mjs"],"names":["toDate","getDefaultOptions","lastDayOfWeek","date","options","defaultOptions","weekStartsOn","locale","_date","day","getDay","diff","setHours","setDate","getDate"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AAC3C,QAAMC,cAAc,GAAGJ,iBAAiB,EAAxC;AACA,QAAMK,YAAY,GAChBF,OAAO,EAAEE,YAAT,IACAF,OAAO,EAAEG,MAAT,EAAiBH,OAAjB,EAA0BE,YAD1B,IAEAD,cAAc,CAACC,YAFf,IAGAD,cAAc,CAACE,MAAf,EAAuBH,OAAvB,EAAgCE,YAHhC,IAIA,CALF;;AAOA,QAAME,KAAK,GAAGR,MAAM,CAACG,IAAD,CAApB;;AACA,QAAMM,GAAG,GAAGD,KAAK,CAACE,MAAN,EAAZ;;AACA,QAAMC,IAAI,GAAG,CAACF,GAAG,GAAGH,YAAN,GAAqB,CAAC,CAAtB,GAA0B,CAA3B,IAAgC,CAAhC,IAAqCG,GAAG,GAAGH,YAA3C,CAAb;;AAEAE,EAAAA,KAAK,CAACI,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAcL,KAAK,CAACM,OAAN,KAAkBH,IAAhC;;AACA,SAAOH,KAAP;AACD,C,CAED;;AACA,eAAeN,aAAf","sourcesContent":["import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link lastDayOfWeek} function options.\n */\n\n/**\n * @name lastDayOfWeek\n * @category Week Helpers\n * @summary Return the last day of a week for the given date.\n *\n * @description\n * Return the last day of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The last day of a week\n *\n * @example\n * // The last day of a week for 2 September 2014 11:55:00:\n * const result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:\n * const result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function lastDayOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n\n  _date.setHours(0, 0, 0, 0);\n  _date.setDate(_date.getDate() + diff);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default lastDayOfWeek;\n"]},"metadata":{},"sourceType":"module"}