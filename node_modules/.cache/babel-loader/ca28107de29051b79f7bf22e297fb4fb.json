{"ast":null,"code":"import { addDays } from \"./addDays.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;\n\n  const _date = toDate(date);\n\n  const currentDay = _date.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n  const delta = 7 - weekStartsOn;\n  const diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;\n  return addDays(_date, diff);\n} // Fallback for modularized imports:\n\nexport default setDay;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/setDay.mjs"],"names":["addDays","toDate","getDefaultOptions","setDay","date","day","options","defaultOptions","weekStartsOn","locale","_date","currentDay","getDay","remainder","dayIndex","delta","diff"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,OAA3B,EAAoC;AACzC,QAAMC,cAAc,GAAGL,iBAAiB,EAAxC;AACA,QAAMM,YAAY,GAChBF,OAAO,EAAEE,YAAT,IACAF,OAAO,EAAEG,MAAT,EAAiBH,OAAjB,EAA0BE,YAD1B,IAEAD,cAAc,CAACC,YAFf,IAGAD,cAAc,CAACE,MAAf,EAAuBH,OAAvB,EAAgCE,YAHhC,IAIA,CALF;;AAOA,QAAME,KAAK,GAAGT,MAAM,CAACG,IAAD,CAApB;;AACA,QAAMO,UAAU,GAAGD,KAAK,CAACE,MAAN,EAAnB;;AAEA,QAAMC,SAAS,GAAGR,GAAG,GAAG,CAAxB;AACA,QAAMS,QAAQ,GAAG,CAACD,SAAS,GAAG,CAAb,IAAkB,CAAnC;AAEA,QAAME,KAAK,GAAG,IAAIP,YAAlB;AACA,QAAMQ,IAAI,GACRX,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAG,CAAjB,GACIA,GAAG,GAAI,CAACM,UAAU,GAAGI,KAAd,IAAuB,CADlC,GAEK,CAACD,QAAQ,GAAGC,KAAZ,IAAqB,CAAtB,GAA4B,CAACJ,UAAU,GAAGI,KAAd,IAAuB,CAHzD;AAIA,SAAOf,OAAO,CAACU,KAAD,EAAQM,IAAR,CAAd;AACD,C,CAED;;AACA,eAAeb,MAAf","sourcesContent":["import { addDays } from \"./addDays.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const currentDay = _date.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(_date, diff);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n"]},"metadata":{},"sourceType":"module"}