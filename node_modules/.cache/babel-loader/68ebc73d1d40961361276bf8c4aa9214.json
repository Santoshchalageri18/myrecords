{"ast":null,"code":"import { addDays } from \"./addDays.mjs\";\nimport { getDay } from \"./getDay.mjs\";\n/**\n * @name nextDay\n * @category Weekday Helpers\n * @summary When is the next day of the week?\n *\n * @description\n * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param day - day of the week\n *\n * @returns The date is the next day of week\n *\n * @example\n * // When is the next Monday after Mar, 20, 2020?\n * const result = nextDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 23 2020 00:00:00\n *\n * @example\n * // When is the next Tuesday after Mar, 21, 2020?\n * const result = nextDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 24 2020 00:00:00\n */\n\nexport function nextDay(date, day) {\n  let delta = day - getDay(date);\n  if (delta <= 0) delta += 7;\n  return addDays(date, delta);\n} // Fallback for modularized imports:\n\nexport default nextDay;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/react-datepicker/node_modules/date-fns/nextDay.mjs"],"names":["addDays","getDay","nextDay","date","day","delta"],"mappings":"AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,GAAvB,EAA4B;AACjC,MAAIC,KAAK,GAAGD,GAAG,GAAGH,MAAM,CAACE,IAAD,CAAxB;AACA,MAAIE,KAAK,IAAI,CAAb,EAAgBA,KAAK,IAAI,CAAT;AAEhB,SAAOL,OAAO,CAACG,IAAD,EAAOE,KAAP,CAAd;AACD,C,CAED;;AACA,eAAeH,OAAf","sourcesContent":["import { addDays } from \"./addDays.mjs\";\nimport { getDay } from \"./getDay.mjs\";\n\n/**\n * @name nextDay\n * @category Weekday Helpers\n * @summary When is the next day of the week?\n *\n * @description\n * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param day - day of the week\n *\n * @returns The date is the next day of week\n *\n * @example\n * // When is the next Monday after Mar, 20, 2020?\n * const result = nextDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 23 2020 00:00:00\n *\n * @example\n * // When is the next Tuesday after Mar, 21, 2020?\n * const result = nextDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 24 2020 00:00:00\n */\nexport function nextDay(date, day) {\n  let delta = day - getDay(date);\n  if (delta <= 0) delta += 7;\n\n  return addDays(date, delta);\n}\n\n// Fallback for modularized imports:\nexport default nextDay;\n"]},"metadata":{},"sourceType":"module"}