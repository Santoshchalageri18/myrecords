{"ast":null,"code":"import _slicedToArray from\"/home/mitron/Desktop/MYMEDIRECORDS/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import axios from'axios';import swal from'sweetalert';var UploadRecord=function UploadRecord(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),file=_useState2[0],setFile=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),description=_useState4[0],setDescription=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),uploading=_useState6[0],setUploading=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),uploadedFileUrl=_useState8[0],setUploadedFileUrl=_useState8[1];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),token=_useState10[0],setToken=_useState10[1];// State to store the JWT token\n// Function to handle file change\nvar handleFileChange=function handleFileChange(e){setFile(e.target.files[0]);};// Function to handle description change\nvar handleDescriptionChange=function handleDescriptionChange(e){setDescription(e.target.value);};// Function to handle upload button click\nvar handleUpload=function handleUpload(){if(!file||!description){swal({text:'Please provide a file and description.',icon:'warning'});return;}var formData=new FormData();formData.append('file',file);formData.append('description',description);setUploading(true);axios.post('http://localhost:2000/upload-record',formData,{headers:{'Content-Type':'multipart/form-data','token':token// Include the JWT token in the request headers\n}}).then(function(response){setUploading(false);swal({text:'File uploaded successfully!',icon:'success'});setFile(null);setDescription('');if(response.data&&response.data.fileUrl){setUploadedFileUrl(response.data.fileUrl);// Store the uploaded file URL\n}}).catch(function(error){var _error$response,_error$response$data;setUploading(false);swal({text:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.errorMessage)||'An error occurred',icon:'error'});});};// Render the component\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Upload Record\"),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{type:\"file\",onChange:handleFileChange}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"Description\",value:description,onChange:handleDescriptionChange}),/*#__PURE__*/React.createElement(\"button\",{onClick:handleUpload,disabled:uploading},uploading?'Uploading...':'Upload')),uploadedFileUrl&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",null,\"Uploaded File:\"),/*#__PURE__*/React.createElement(\"img\",{src:uploadedFileUrl,alt:\"Uploaded File\",style:{maxWidth:'100%'}})));};export default UploadRecord;","map":{"version":3,"sources":["/home/mitron/Desktop/MYMEDIRECORDS/frontend/src/Components/DashbordCompo/UploadRecord.js"],"names":["React","useState","axios","swal","UploadRecord","file","setFile","description","setDescription","uploading","setUploading","uploadedFileUrl","setUploadedFileUrl","token","setToken","handleFileChange","e","target","files","handleDescriptionChange","value","handleUpload","text","icon","formData","FormData","append","post","headers","then","response","data","fileUrl","catch","error","errorMessage","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport swal from 'sweetalert';\n\nconst UploadRecord = () => {\n  const [file, setFile] = useState(null);\n  const [description, setDescription] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const [uploadedFileUrl, setUploadedFileUrl] = useState('');\n  const [token, setToken] = useState(null); // State to store the JWT token\n\n  // Function to handle file change\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  // Function to handle description change\n  const handleDescriptionChange = (e) => {\n    setDescription(e.target.value);\n  };\n\n  // Function to handle upload button click\n  const handleUpload = () => {\n    if (!file || !description) {\n      swal({\n        text: 'Please provide a file and description.',\n        icon: 'warning',\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('description', description);\n\n    setUploading(true);\n\n    axios.post('http://localhost:2000/upload-record', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'token': token // Include the JWT token in the request headers\n      },\n    })\n      .then((response) => {\n        setUploading(false);\n        swal({\n          text: 'File uploaded successfully!',\n          icon: 'success',\n        });\n        setFile(null);\n        setDescription('');\n        if (response.data && response.data.fileUrl) {\n          setUploadedFileUrl(response.data.fileUrl); // Store the uploaded file URL\n        }\n      })\n      .catch((error) => {\n        setUploading(false);\n        swal({\n          text: error.response?.data?.errorMessage || 'An error occurred',\n          icon: 'error',\n        });\n      });\n  };\n\n  // Render the component\n  return (\n    <div>\n      <h1>Upload Record</h1>\n      <div>\n        <input type=\"file\" onChange={handleFileChange} />\n        <input \n          type=\"text\" \n          placeholder=\"Description\" \n          value={description} \n          onChange={handleDescriptionChange} \n        />\n        <button onClick={handleUpload} disabled={uploading}>\n          {uploading ? 'Uploading...' : 'Upload'}\n        </button>\n      </div>\n      {uploadedFileUrl && (\n        <div>\n          <p>Uploaded File:</p>\n          {/* Render the uploaded file */}\n          <img src={uploadedFileUrl} alt=\"Uploaded File\" style={{ maxWidth: '100%' }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UploadRecord;\n"]},"metadata":{},"sourceType":"module"}